AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Generate Email Alerts from IAM Access Analyer when a resource is made public
  Authored by Chris Farris <chris@chrisfarris.com>

Parameters:

  pDebug:
    Description: Enable Debugging in CloudWatchLogs
    Type: String
    Default: "False"
    AllowedValues:
      - "False"
      - "True"

  pEmailAddress:
    Description: If set, emails will be sent to this address, in addition to the Topic
    Type: String
    Default: NONE

  pEmailSender:
    Description: If set, emails will be sent from this address rather than the recipient email address
    Type: String
    Default: NONE

  pCreateAnalyzer:
    Description: Set this to false to disable the creation of an addtional Analyer
    Type: String
    Default: "True"
    AllowedValues:
      - "False"
      - "True"

  pLambdaBucket:
    Description: If set, emails will be sent to this address, in addition to the Topic
    Type: String
    Default: pht-cloudformation

  pLambdaObject:
    Description: If set, emails will be sent to this address, in addition to the Topic
    Type: String
    Default: aws-iam-access-alerter-0.0.1.zip


Conditions:
  CreateAnalyzer: !Equals [ !Ref pCreateAnalyzer, "True"]
  SendFromRecipient: !Equals [ !Ref pEmailSender, "NONE"]
  SendEmails: !Not [!Equals [ !Ref pEmailAddress, "NONE"]]

Resources:

  LambdaRole:
    Type: AWS::IAM::Role
    Condition: SendEmails
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/IAMAccessAnalyzerReadOnlyAccess
      Policies:
      - PolicyName: LambdaLogging
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Resource: '*'
            Action:
            - logs:*
            Effect: Allow
      - PolicyName: SendEmails
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Resource: '*'
            Action:
            - ses:*   #FIXME
            Effect: Allow
      - PolicyName: GetAccountDetails
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Resource: '*'
            Action:
            - iam:ListAccountAliases
            Effect: Allow

  EmailFunction:
    Type: AWS::Lambda::Function
    Condition: SendEmails
    Properties:
      FunctionName: !Sub "${AWS::StackName}-send-email"
      Description: Sends emails based on IAM Access Advisor Findings
      Handler: email.handler
      Runtime: python3.6
      Timeout: 150
      MemorySize: 768
      Role: !GetAtt LambdaRole.Arn
      Code:
        S3Bucket: !Ref pLambdaBucket
        S3Key: !Ref pLambdaObject
      Environment:
        Variables:
          EMAIL_TO: !Ref pEmailAddress
          EMAIL_FROM: !If [SendFromRecipient, !Ref pEmailAddress, !Ref pEmailSender]
          DEBUG: !Ref pDebug
      # Tags inherited from Stack

  IAMAccessAnalyzer:
    Type: AWS::AccessAnalyzer::Analyzer
    DependsOn: EmailFunction
    Condition: CreateAnalyzer
    Properties:
      AnalyzerName: !Sub "${AWS::StackName}"
      Type: ACCOUNT

  AnalyzerEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: AccessAnalyzerEvents
      State: ENABLED
      EventPattern:
        source:
          - "aws.access-analyzer"
        detail-type:
          - "Access Analyzer Finding"
      Targets:
        - Arn: !Ref AnalyzerEventTopic
          Id: IAMAccessAnalyzerTopic

  AnalyzerEventTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub "Topic for events from ${AWS::StackName}"

  EmailLambdaFunctionPermission:
    Type: AWS::Lambda::Permission
    Condition: SendEmails
    Properties:
      FunctionName: !GetAtt EmailFunction.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Ref AnalyzerEventTopic
      Action: lambda:invokeFunction

  EmailTopicToLambdaSubscription:
    Type: AWS::SNS::Subscription
    Condition: SendEmails
    Properties:
      Endpoint: !GetAtt EmailFunction.Arn
      Protocol: lambda
      TopicArn: !Ref 'AnalyzerEventTopic'


Outputs:
  StackName:
    Description: Name of this Stack
    Value: !Ref AWS::StackName

  TemplateVersion:
    Description: Version of this CFT
    Value: 0.0.2

  TopicArn:
    Description: Arn of the topic findings are sent to
    Value: !Ref AnalyzerEventTopic